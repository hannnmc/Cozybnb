{"version":3,"sources":["../src/reach-auto-id.ts"],"sourcesContent":["/*\n * Welcome to @reach/auto-id!\n\n * Let's see if we can make sense of why this hook exists and its\n * implementation.\n *\n * Some background:\n *   1. Accessibility APIs rely heavily on element IDs\n *   2. Requiring developers to put IDs on every element in Reach UI is both\n *      cumbersome and error-prone\n *   3. With a component model, we can generate IDs for them!\n *\n * Solution 1: Generate random IDs.\n *\n * This works great as long as you don't server render your app. When React (in\n * the client) tries to reuse the markup from the server, the IDs won't match\n * and React will then recreate the entire DOM tree.\n *\n * Solution 2: Increment an integer\n *\n * This sounds great. Since we're rendering the exact same tree on the server\n * and client, we can increment a counter and get a deterministic result between\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\n * pretty sure the tab will be closed before an app never needs\n * 10 quadrillion IDs!\n *\n * Problem solved, right?\n *\n * Ah, but there's a catch! React's concurrent rendering makes this approach\n * non-deterministic. While the client and server will end up with the same\n * elements in the end, depending on suspense boundaries (and possibly some user\n * input during the initial render) the incrementing integers won't always match\n * up.\n *\n * Solution 3: Don't use IDs at all on the server; patch after first render.\n *\n * What we've done here is solution 2 with some tricks. With this approach, the\n * ID returned is an empty string on the first render. This way the server and\n * client have the same markup no matter how wild the concurrent rendering may\n * have gotten.\n *\n * After the render, we patch up the components with an incremented ID. This\n * causes a double render on any components with `useId`. Shouldn't be a problem\n * since the components using this hook should be small, and we're only updating\n * the ID attribute on the DOM, nothing big is happening.\n *\n * It doesn't have to be an incremented number, though--we could do generate\n * random strings instead, but incrementing a number is probably the cheapest\n * thing we can do.\n *\n * Additionally, we only do this patchup on the very first client render ever.\n * Any calls to `useId` that happen dynamically in the client will be\n * populated immediately with a value. So, we only get the double render after\n * server hydration and never again, SO BACK OFF ALRIGHT?\n */\n\n/* eslint-disable react-hooks/rules-of-hooks */\n\nimport * as React from \"react\";\nimport { useIsomorphicLayoutEffect as useLayoutEffect } from \"@reach/utils\";\n\nlet serverHandoffComplete = false;\nlet id = 0;\nfunction genId() {\n\treturn ++id;\n}\n\n// Workaround for https://github.com/webpack/webpack/issues/14814\n// https://github.com/eps1lon/material-ui/blob/8d5f135b4d7a58253a99ab56dce4ac8de61f5dc1/packages/mui-utils/src/useId.ts#L21\nconst maybeReactUseId: undefined | (() => string) = (React as any)[\n\t\"useId\".toString()\n];\n\n/**\n * useId\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reach.tech/auto-id\n */\nfunction useId(idFromProps: string): string;\nfunction useId(idFromProps: number): number;\nfunction useId(idFromProps: string | number): string | number;\nfunction useId(idFromProps: string | undefined | null): string | undefined;\nfunction useId(idFromProps: number | undefined | null): number | undefined;\nfunction useId(\n\tidFromProps: string | number | undefined | null\n): string | number | undefined;\nfunction useId(): string | undefined;\n\nfunction useId(providedId?: number | string | undefined | null) {\n\tif (maybeReactUseId !== undefined) {\n\t\tlet generatedId = maybeReactUseId();\n\t\treturn providedId ?? generatedId;\n\t}\n\n\t// If this instance isn't part of the initial render, we don't have to do the\n\t// double render/patch-up dance. We can just generate the ID and return it.\n\tlet initialId = providedId ?? (serverHandoffComplete ? genId() : null);\n\tlet [id, setId] = React.useState(initialId);\n\n\tuseLayoutEffect(() => {\n\t\tif (id === null) {\n\t\t\t// Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n\t\t\t// rendering flicker, though it'll make the first render slower (unlikely\n\t\t\t// to matter, but you're welcome to measure your app and let us know if\n\t\t\t// it's a problem).\n\t\t\tsetId(genId());\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tif (serverHandoffComplete === false) {\n\t\t\t// Flag all future uses of `useId` to skip the update dance. This is in\n\t\t\t// `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n\t\t\t// accidentally bail out of the patch-up dance prematurely.\n\t\t\tserverHandoffComplete = true;\n\t\t}\n\t}, []);\n\n\treturn providedId ?? id ?? undefined;\n}\n\nexport { useId };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA0DA,YAAuB;AACvB,mBAA6D;AAE7D,IAAI,wBAAwB;AAC5B,IAAI,KAAK;AACT,iBAAiB;AAChB,SAAO,EAAE;AACV;AAIA,IAAM,kBAA+C,MACpD,QAAQ,SAAS;AAwBlB,eAAe,YAAiD;AA9FhE;AA+FC,MAAI,oBAAoB,QAAW;AAClC,QAAI,cAAc,gBAAgB;AAClC,WAAO,kCAAc;AAAA,EACtB;AAIA,MAAI,YAAY,kCAAe,wBAAwB,MAAM,IAAI;AACjE,MAAI,CAAC,KAAI,SAAS,AAAM,eAAS,SAAS;AAE1C,8CAAgB,MAAM;AACrB,QAAI,QAAO,MAAM;AAKhB,YAAM,MAAM,CAAC;AAAA,IACd;AAAA,EAED,GAAG,CAAC,CAAC;AAEL,EAAM,gBAAU,MAAM;AACrB,QAAI,0BAA0B,OAAO;AAIpC,8BAAwB;AAAA,IACzB;AAAA,EACD,GAAG,CAAC,CAAC;AAEL,SAAO,wCAAc,QAAd,YAAoB;AAC5B;","names":[]}