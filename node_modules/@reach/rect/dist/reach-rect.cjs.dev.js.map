{"version":3,"sources":["../src/reach-rect.tsx"],"sourcesContent":["/**\n * Welcome to @reach/rect!\n *\n * Measures DOM elements (aka. bounding client rect).\n *\n * @see getBoundingClientRect https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n * @see Docs                  https://reach.tech/rect\n * @see Source                https://github.com/reach/reach-ui/tree/main/packages/rect\n */\n\nimport * as React from \"react\";\nimport observeRect from \"@reach/observe-rect\";\nimport {\n\tuseIsomorphicLayoutEffect as useLayoutEffect,\n\tisBoolean,\n\tisFunction,\n} from \"@reach/utils\";\n\ndeclare const __DEV__: boolean;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Rect\n *\n * @param props\n */\nconst Rect: React.FC<RectProps> = ({ onChange, observe = true, children }) => {\n\tconst ref = React.useRef<HTMLElement | null>(null);\n\tconst rect = useRect(ref, { observe, onChange });\n\treturn children({ ref, rect });\n};\n\n/**\n * @see Docs https://reach.tech/rect#rect-props\n */\ntype RectProps = UseRectOptions & {\n\t/**\n\t * A function that calls back to you with a `ref` to place on an element and\n\t * the `rect` measurements of the dom node.\n\t *\n\t * **Note**: On the first render `rect` will be `undefined` because we can't\n\t * measure a node that has not yet been rendered. Make sure your code accounts\n\t * for this.\n\t *\n\t * @see Docs https://reach.tech/rect#rect-onchange\n\t */\n\tchildren(args: {\n\t\trect: PRect | null;\n\t\tref: React.RefObject<any>;\n\t}): JSX.Element;\n};\n\nRect.displayName = \"Rect\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction useRect<T extends Element = HTMLElement>(\n\tnodeRef: React.RefObject<T | undefined | null>,\n\toptions?: UseRectOptions\n): null | DOMRect;\n\nfunction useRect<T extends Element = HTMLElement>(\n\tnodeRef: React.RefObject<T | undefined | null>,\n\tobserve?: UseRectOptions[\"observe\"],\n\tonChange?: UseRectOptions[\"onChange\"]\n): null | DOMRect;\n\n/**\n * useRect\n *\n * @param nodeRef\n * @param observe\n * @param onChange\n */\nfunction useRect<T extends Element = HTMLElement>(\n\tnodeRef: React.RefObject<T | undefined | null>,\n\tobserveOrOptions?: boolean | UseRectOptions,\n\tdeprecated_onChange?: UseRectOptions[\"onChange\"]\n): null | DOMRect {\n\tlet observe: boolean;\n\tlet onChange: UseRectOptions[\"onChange\"];\n\tif (isBoolean(observeOrOptions)) {\n\t\tobserve = observeOrOptions;\n\t} else {\n\t\tobserve = observeOrOptions?.observe ?? true;\n\t\tonChange = observeOrOptions?.onChange;\n\t}\n\tif (isFunction(deprecated_onChange)) {\n\t\tonChange = deprecated_onChange;\n\t}\n\n\tif (__DEV__) {\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tReact.useEffect(() => {\n\t\t\tif (isBoolean(observeOrOptions)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"Passing `observe` as the second argument to `useRect` is deprecated and will be removed in a future version of Reach UI. Instead, you can pass an object of options with an `observe` property as the second argument (`useRect(ref, { observe })`).\\n\" +\n\t\t\t\t\t\t\"See https://reach.tech/rect#userect-observe\"\n\t\t\t\t);\n\t\t\t}\n\t\t}, [observeOrOptions]);\n\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tReact.useEffect(() => {\n\t\t\tif (isFunction(deprecated_onChange)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"Passing `onChange` as the third argument to `useRect` is deprecated and will be removed in a future version of Reach UI. Instead, you can pass an object of options with an `onChange` property as the second argument (`useRect(ref, { onChange })`).\\n\" +\n\t\t\t\t\t\t\"See https://reach.tech/rect#userect-onchange\"\n\t\t\t\t);\n\t\t\t}\n\t\t}, [deprecated_onChange]);\n\t}\n\n\tlet [element, setElement] = React.useState(nodeRef.current);\n\tlet initialRectIsSet = React.useRef(false);\n\tlet initialRefIsSet = React.useRef(false);\n\tlet [rect, setRect] = React.useState<DOMRect | null>(null);\n\tlet onChangeRef = React.useRef(onChange);\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tuseLayoutEffect(() => {\n\t\tonChangeRef.current = onChange;\n\t\tif (nodeRef.current !== element) {\n\t\t\tsetElement(nodeRef.current);\n\t\t}\n\t});\n\n\tuseLayoutEffect(() => {\n\t\tif (element && !initialRectIsSet.current) {\n\t\t\tinitialRectIsSet.current = true;\n\t\t\tsetRect(element.getBoundingClientRect());\n\t\t}\n\t}, [element]);\n\n\tuseLayoutEffect(() => {\n\t\tif (!observe) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet elem = element;\n\t\t// State initializes before refs are placed, meaning the element state will\n\t\t// be undefined on the first render. We still want the rect on the first\n\t\t// render, so initially we'll use the nodeRef that was passed instead of\n\t\t// state for our measurements.\n\t\tif (!initialRefIsSet.current) {\n\t\t\tinitialRefIsSet.current = true;\n\t\t\telem = nodeRef.current;\n\t\t}\n\n\t\tif (!elem) {\n\t\t\tif (__DEV__) {\n\t\t\t\tconsole.warn(\"You need to place the ref\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet observer = observeRect(elem, (rect) => {\n\t\t\tonChangeRef.current?.(rect);\n\t\t\tsetRect(rect);\n\t\t});\n\t\tobserver.observe();\n\t\treturn () => {\n\t\t\tobserver.unobserve();\n\t\t};\n\t}, [observe, element, nodeRef]);\n\n\treturn rect;\n}\n\n/**\n * @see Docs https://reach.tech/rect#userect\n */\ntype UseRectOptions = {\n\t/**\n\t * Tells `Rect` to observe the position of the node or not. While observing,\n\t * the `children` render prop may call back very quickly (especially while\n\t * scrolling) so it can be important for performance to avoid observing when\n\t * you don't need to.\n\t *\n\t * This is typically used for elements that pop over other elements (like a\n\t * dropdown menu), so you don't need to observe all the time, only when the\n\t * popup is active.\n\t *\n\t * Pass `true` to observe, `false` to ignore.\n\t *\n\t * @see Docs https://reach.tech/rect#userect-observe\n\t */\n\tobserve?: boolean;\n\t/**\n\t * Calls back whenever the `rect` of the element changes.\n\t *\n\t * @see Docs https://reach.tech/rect#userect-onchange\n\t */\n\tonChange?: (rect: PRect) => void;\n};\n\ntype PRect = Partial<DOMRect> & {\n\treadonly bottom: number;\n\treadonly height: number;\n\treadonly left: number;\n\treadonly right: number;\n\treadonly top: number;\n\treadonly width: number;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { PRect, UseRectOptions, RectProps };\nexport { Rect, useRect };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,YAAuB;AACvB,0BAAwB;AACxB,mBAIO;AAWP,IAAM,OAA4B,CAAC,EAAE,UAAU,UAAU,MAAM,eAAe;AAC7E,QAAM,MAAM,AAAM,aAA2B,IAAI;AACjD,QAAM,OAAO,QAAQ,KAAK,EAAE,SAAS,SAAS,CAAC;AAC/C,SAAO,SAAS,EAAE,KAAK,KAAK,CAAC;AAC9B;AAsBA,KAAK,cAAc;AAsBnB,iBACC,SACA,kBACA,qBACiB;AA/ElB;AAgFC,MAAI;AACJ,MAAI;AACJ,MAAI,4BAAU,gBAAgB,GAAG;AAChC,cAAU;AAAA,EACX,OAAO;AACN,cAAU,2DAAkB,YAAlB,YAA6B;AACvC,eAAW,qDAAkB;AAAA,EAC9B;AACA,MAAI,6BAAW,mBAAmB,GAAG;AACpC,eAAW;AAAA,EACZ;AAEA,MAAI,MAAS;AAEZ,IAAM,gBAAU,MAAM;AACrB,UAAI,4BAAU,gBAAgB,GAAG;AAChC,gBAAQ,KACP,mSAED;AAAA,MACD;AAAA,IACD,GAAG,CAAC,gBAAgB,CAAC;AAGrB,IAAM,gBAAU,MAAM;AACrB,UAAI,6BAAW,mBAAmB,GAAG;AACpC,gBAAQ,KACP,sSAED;AAAA,MACD;AAAA,IACD,GAAG,CAAC,mBAAmB,CAAC;AAAA,EACzB;AAEA,MAAI,CAAC,SAAS,cAAc,AAAM,eAAS,QAAQ,OAAO;AAC1D,MAAI,mBAAmB,AAAM,aAAO,KAAK;AACzC,MAAI,kBAAkB,AAAM,aAAO,KAAK;AACxC,MAAI,CAAC,MAAM,WAAW,AAAM,eAAyB,IAAI;AACzD,MAAI,cAAc,AAAM,aAAO,QAAQ;AAGvC,8CAAgB,MAAM;AACrB,gBAAY,UAAU;AACtB,QAAI,QAAQ,YAAY,SAAS;AAChC,iBAAW,QAAQ,OAAO;AAAA,IAC3B;AAAA,EACD,CAAC;AAED,8CAAgB,MAAM;AACrB,QAAI,WAAW,CAAC,iBAAiB,SAAS;AACzC,uBAAiB,UAAU;AAC3B,cAAQ,QAAQ,sBAAsB,CAAC;AAAA,IACxC;AAAA,EACD,GAAG,CAAC,OAAO,CAAC;AAEZ,8CAAgB,MAAM;AACrB,QAAI,CAAC,SAAS;AACb;AAAA,IACD;AAEA,QAAI,OAAO;AAKX,QAAI,CAAC,gBAAgB,SAAS;AAC7B,sBAAgB,UAAU;AAC1B,aAAO,QAAQ;AAAA,IAChB;AAEA,QAAI,CAAC,MAAM;AACV,UAAI,MAAS;AACZ,gBAAQ,KAAK,2BAA2B;AAAA,MACzC;AACA;AAAA,IACD;AAEA,QAAI,WAAW,iCAAY,MAAM,CAAC,UAAS;AA7J7C;AA8JG,yBAAY,YAAZ,sCAAsB;AACtB,cAAQ,KAAI;AAAA,IACb,CAAC;AACD,aAAS,QAAQ;AACjB,WAAO,MAAM;AACZ,eAAS,UAAU;AAAA,IACpB;AAAA,EACD,GAAG,CAAC,SAAS,SAAS,OAAO,CAAC;AAE9B,SAAO;AACR;","names":[]}