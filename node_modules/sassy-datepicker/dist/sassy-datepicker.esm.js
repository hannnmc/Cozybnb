import React, { useRef, useCallback, useEffect, useState, useMemo, memo, forwardRef } from 'react';
import dt from 'date-and-time';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var LeftCaret = function LeftCaret(_ref) {
  var _ref$height = _ref.height,
      height = _ref$height === void 0 ? '16' : _ref$height,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '16' : _ref$width,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'currentColor' : _ref$color,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? '24' : _ref$strokeWidth;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: width,
    height: height,
    fill: color,
    viewBox: "0 0 256 256"
  }, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React.createElement("polyline", {
    points: "160 208 80 128 160 48",
    fill: "none",
    stroke: color,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: strokeWidth
  }));
};

var RightCaret = function RightCaret(_ref) {
  var _ref$height = _ref.height,
      height = _ref$height === void 0 ? '16' : _ref$height,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '16' : _ref$width,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'currentColor' : _ref$color,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? '24' : _ref$strokeWidth;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: width,
    height: height,
    fill: color,
    viewBox: "0 0 256 256"
  }, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React.createElement("polyline", {
    points: "96 48 176 128 96 208",
    fill: "none",
    stroke: color,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: strokeWidth
  }));
};

var DAYS;

(function (DAYS) {
  DAYS[DAYS["Sunday"] = 0] = "Sunday";
  DAYS[DAYS["Monday"] = 1] = "Monday";
  DAYS[DAYS["Tuesday"] = 2] = "Tuesday";
  DAYS[DAYS["Wednesday"] = 3] = "Wednesday";
  DAYS[DAYS["Thursday"] = 4] = "Thursday";
  DAYS[DAYS["Friday"] = 5] = "Friday";
  DAYS[DAYS["Saturday"] = 6] = "Saturday";
})(DAYS || (DAYS = {}));

var MONTHS;

(function (MONTHS) {
  MONTHS[MONTHS["January"] = 0] = "January";
  MONTHS[MONTHS["February"] = 1] = "February";
  MONTHS[MONTHS["March"] = 2] = "March";
  MONTHS[MONTHS["April"] = 3] = "April";
  MONTHS[MONTHS["May"] = 4] = "May";
  MONTHS[MONTHS["June"] = 5] = "June";
  MONTHS[MONTHS["July"] = 6] = "July";
  MONTHS[MONTHS["August"] = 7] = "August";
  MONTHS[MONTHS["September"] = 8] = "September";
  MONTHS[MONTHS["October"] = 9] = "October";
  MONTHS[MONTHS["November"] = 10] = "November";
  MONTHS[MONTHS["December"] = 11] = "December";
})(MONTHS || (MONTHS = {}));

var getMonthNameFromNumber = function getMonthNameFromNumber(month) {
  if (month < 0 || month > 11) {
    throw new Error("Invalid month number: " + month);
  }

  return MONTHS[month];
};
var getMonthNumberFromName = function getMonthNumberFromName(month) {
  switch (month) {
    case 'January':
      return 0;

    case 'February':
      return 1;

    case 'March':
      return 2;

    case 'April':
      return 3;

    case 'May':
      return 4;

    case 'June':
      return 5;

    case 'July':
      return 6;

    case 'August':
      return 7;

    case 'September':
      return 8;

    case 'October':
      return 9;

    case 'November':
      return 10;

    case 'December':
      return 11;

    default:
      throw new Error("Invalid month name: " + month);
  }
};
var getDaysOfWeek = function getDaysOfWeek(weekStartsFrom) {
  if (weekStartsFrom === 'Monday') {
    return ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
  }

  return ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
};

var getMidnight = function getMidnight(n) {
  var d = new Date(n);
  d.setHours(0, 0, 0, 0);
  return d.valueOf();
};

var getDatesOfMonth = function getDatesOfMonth(date, minDateValue, maxDateValue, weekStartsFrom) {
  var currentYear = date.getFullYear();
  var currentMonth = date.getMonth();
  var minDate = getMidnight(minDateValue);
  var maxDate = getMidnight(maxDateValue); // generate dates of each week of the month including the residue dates
  // of the last week of previous month and first week of next month

  var firstDayOfMonth = new Date(currentYear, currentMonth, 1);
  var lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0); // first day of the pervious month
  // const previousMonth = dt.addMonths(firstDayOfMonth, -1);
  // last day of the pervious month

  var previousMonthLastDay = dt.addDays(firstDayOfMonth, -1);
  var dates = []; // the number of the weekday of the first day of the month

  var firstWeekDayOfMonth = firstDayOfMonth.getDay(); // the number of the weekday of the last day of the month

  var lastWeekDayOfMonth = lastDayOfMonth.getDay();

  if (weekStartsFrom === 'Sunday') {
    // insert the residual dates of previous month's last week
    for (var _i = 1; _i <= firstWeekDayOfMonth; _i++) {
      var d = dt.addDays(previousMonthLastDay, _i - firstWeekDayOfMonth);
      dates.push({
        date: d,
        active: false,
        ms: d.valueOf()
      });
    }

    var fullYear = date.getFullYear();
    var fullMonth = date.getMonth(); // insert the dates of the current month

    for (var _i2 = 1; _i2 <= lastDayOfMonth.getDate(); _i2++) {
      var _d = new Date(fullYear, fullMonth, _i2);

      var dValue = _d.valueOf(); // compare day of month


      dates.push({
        date: _d,
        active: dValue >= minDate && dValue <= maxDate,
        ms: dValue
      });
    }

    var i = lastWeekDayOfMonth + 1;
    var counter = 1; // insert the residual dates of the next month

    while (i <= 6) {
      var _d2 = dt.addDays(lastDayOfMonth, counter++);

      dates.push({
        date: _d2,
        active: false,
        ms: _d2.valueOf()
      });
      i++;
    }
  } else {
    // insert the residual dates of previous month's last week
    for (var _i4 = 1; _i4 < firstWeekDayOfMonth; _i4++) {
      var _d3 = dt.addDays(previousMonthLastDay, _i4 - firstWeekDayOfMonth + 1);

      dates.push({
        date: _d3,
        active: false,
        ms: _d3.valueOf()
      });
    }

    var _fullYear = date.getFullYear();

    var _fullMonth = date.getMonth(); // insert the dates of the current month


    for (var _i5 = 1; _i5 <= lastDayOfMonth.getDate(); _i5++) {
      var _d4 = new Date(_fullYear, _fullMonth, _i5);

      var _dValue = _d4.valueOf(); // compare day of month


      dates.push({
        date: _d4,
        active: _dValue >= minDate && _dValue <= maxDate,
        ms: _dValue
      });
    }

    var _i3 = lastWeekDayOfMonth;
    var _counter = 1; // insert the residual dates of the next month

    while (_i3 <= 6) {
      var _d5 = dt.addDays(lastDayOfMonth, _counter++);

      dates.push({
        date: _d5,
        active: false,
        ms: _d5.valueOf()
      });
      _i3++;
    }
  }

  return dates;
};

var _excluded = ["selected", "value", "label", "onClick", "disabled"];
/**
 * Custom Option component.
 */

function Option(_ref) {
  var selected = _ref.selected,
      value = _ref.value,
      label = _ref.label,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  var ref = useRef(null);
  var handleClick = useCallback(function () {
    if (!disabled) {
      onClick(value);
    }
  }, [onClick, disabled, value]);
  useEffect(function () {
    if (selected) {
      var _ref$current;

      (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();
    }

    return function () {
      var _ref$current2;

      return (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.blur();
    };
  }, [selected]);
  return React.createElement("button", Object.assign({
    key: label,
    ref: ref,
    type: "button",
    className: "sassy--option " + (selected ? 'sassy--option__active' : '') + " " + (disabled ? 'sassy--option__disabled' : ''),
    onClick: handleClick
  }, props), label);
}

/**
 * A custom select component.
 *
 */

function CustomSelect(_ref) {
  var value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange,
      className = _ref.className,
      disabled = _ref.disabled,
      formatValue = _ref.formatValue;
  var ref = useRef(null);

  var _useState = useState(false),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var openOptionsDropdown = useCallback(function () {
    if (!disabled) setIsOpen(true);
  }, [setIsOpen, disabled]);
  var closeOptionsDropdown = useCallback(function () {
    setIsOpen(false);
  }, [setIsOpen]);
  var handleOptionSelect = useCallback(function (v) {
    onChange(v);
    closeOptionsDropdown();
  }, [onChange, closeOptionsDropdown]);
  var showDropDown = useMemo(function () {
    return isOpen && !disabled;
  }, [isOpen, disabled]);
  var displayValue = useMemo(function () {
    var _formatValue;

    return (_formatValue = formatValue == null ? void 0 : formatValue(value)) != null ? _formatValue : value;
  }, [formatValue, value]);
  useEffect(function () {
    var _ref$current3;

    var clickListener = function clickListener(e) {
      var _ref$current;

      if (!((_ref$current = ref.current) != null && _ref$current.contains(e.target))) {
        closeOptionsDropdown();
      }
    };

    var focusOutListener = function focusOutListener(e) {
      var _ref$current2;

      if (!((_ref$current2 = ref.current) != null && _ref$current2.contains(e.relatedTarget))) {
        closeOptionsDropdown();
      }
    };

    document.addEventListener('click', clickListener);
    (_ref$current3 = ref.current) == null ? void 0 : _ref$current3.addEventListener('focusout', focusOutListener);
    return function () {
      var _ref$current4;

      document.removeEventListener('click', clickListener);
      (_ref$current4 = ref.current) == null ? void 0 : _ref$current4.removeEventListener('focusout', focusOutListener);
    };
  }, [closeOptionsDropdown, ref.current]);
  return React.createElement("div", {
    tabIndex: -1,
    className: "sassy--select__container " + (className != null ? className : ''),
    ref: ref
  }, React.createElement("p", {
    className: "sassy--select " + (disabled ? 'sassy--select__disabled' : ''),
    tabIndex: disabled ? -1 : 0,
    onClick: openOptionsDropdown,
    onFocus: openOptionsDropdown
  }, displayValue), showDropDown && React.createElement("div", {
    className: "sassy--select__dropdown"
  }, options.map(function (_ref2) {
    var currValue = _ref2.value,
        label = _ref2.label,
        disabled = _ref2.disabled;
    return React.createElement(Option, {
      key: label,
      label: label,
      selected: value === currValue,
      value: currValue,
      disabled: disabled,
      onClick: handleOptionSelect,
      "aria-label": "Select " + label
    });
  })));
}

var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

var MonthPicker = function MonthPicker(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      disabled = _ref.disabled;
  var options = useMemo(function () {
    return months.map(function (m) {
      return {
        value: m,
        label: m,
        disabled: false
      };
    });
  }, []);
  return React.createElement(CustomSelect, {
    className: "sdp--select__month",
    value: value,
    onChange: onChange,
    options: options,
    disabled: disabled
  });
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var _marked = /*#__PURE__*/runtime_1.mark(generateRange);

function generateRange(from, to, step) {
  var i;
  return runtime_1.wrap(function generateRange$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          i = from;

        case 1:
          if (!(i <= to)) {
            _context.next = 7;
            break;
          }

          _context.next = 4;
          return i;

        case 4:
          i += step;
          _context.next = 1;
          break;

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

var YearPicker = function YearPicker(_ref) {
  var fromYear = _ref.fromYear,
      toYear = _ref.toYear,
      value = _ref.value,
      onChange = _ref.onChange,
      disabled = _ref.disabled;
  var options = useMemo(function () {
    return Array.from(generateRange(fromYear, toYear, 1)).map(function (v) {
      return {
        value: v,
        label: v.toString(),
        disabled: false
      };
    });
  }, [fromYear, toYear]);
  return React.createElement(CustomSelect, {
    value: value,
    onChange: onChange,
    options: options,
    disabled: disabled
  });
};

var Header = function Header(_ref) {
  var month = _ref.month,
      year = _ref.year,
      minDateValue = _ref.minDateValue,
      maxDateValue = _ref.maxDateValue,
      nextMonth = _ref.nextMonth,
      prevMonth = _ref.prevMonth,
      onMonthChange = _ref.onMonthChange,
      onYearChange = _ref.onYearChange,
      disabled = _ref.disabled;
  var fromYear = useMemo(function () {
    return new Date(minDateValue).getFullYear();
  }, [minDateValue]);
  var toYear = useMemo(function () {
    return new Date(maxDateValue).getFullYear();
  }, [maxDateValue]);
  return React.createElement("div", {
    className: "sdp--header"
  }, React.createElement("button", {
    className: "sdp--square-btn sdp--square-btn__shadowed sdp--square-btn__outlined",
    onClick: prevMonth,
    "aria-label": "Go to previous month",
    type: "button",
    disabled: disabled
  }, React.createElement(LeftCaret, null)), React.createElement("div", {
    className: "sdp--header__main"
  }, React.createElement(MonthPicker, {
    disabled: disabled,
    value: getMonthNameFromNumber(month),
    onChange: onMonthChange
  }), React.createElement(YearPicker, {
    disabled: disabled,
    fromYear: fromYear,
    toYear: toYear,
    onChange: onYearChange,
    value: year
  })), React.createElement("button", {
    className: "sdp--square-btn sdp--square-btn__shadowed sdp--square-btn__outlined",
    onClick: nextMonth,
    "aria-label": "Go to next month",
    type: "button",
    disabled: disabled
  }, React.createElement(RightCaret, null)));
};

var dateOptions = {
  weekday: 'long',
  month: 'long',
  day: 'numeric',
  year: 'numeric'
};

var DateButton = function DateButton(_ref) {
  var date = _ref.date,
      active = _ref.active,
      onClick = _ref.onClick,
      selected = _ref.selected;
  var handleClick = useCallback(function () {
    onClick(date);
  }, [onClick, date]);
  var dateAriaLabel = useMemo(function () {
    return date.toLocaleDateString('en-US', dateOptions);
  }, [date, dateOptions]);
  return React.createElement("button", {
    className: "sdp--square-btn sdp--date-btn " + (selected ? 'sdp--date-btn__selected' : '') + " sdp--text " + (!active ? 'sdp--text__inactive' : ''),
    onClick: handleClick,
    tabIndex: active ? 0 : -1,
    "aria-label": (selected ? 'Currently selected' : 'Select') + " " + dateAriaLabel,
    type: "button"
  }, date.getDate());
}; // take care of onClick


var DateButton$1 = /*#__PURE__*/memo(DateButton, function (p, n) {
  return dt.isSameDay(p.date, n.date) && p.active === n.active && p.selected === n.selected;
});

var _excluded$1 = ["onChange", "value", "minDate", "maxDate", "weekStartsFrom", "className", "disabled"];
/**
 * DatePicker component to pick dates
 */

var DatePicker = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var onChange = _ref.onChange,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? new Date() : _ref$value,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      _ref$weekStartsFrom = _ref.weekStartsFrom,
      weekStartsFrom = _ref$weekStartsFrom === void 0 ? 'Sunday' : _ref$weekStartsFrom,
      className = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  var minDateValue = useMemo(function () {
    var _minDate$valueOf;

    return (_minDate$valueOf = minDate == null ? void 0 : minDate.valueOf()) != null ? _minDate$valueOf : new Date(1900, 0, 1).valueOf();
  }, [minDate]);
  var maxDateValue = useMemo(function () {
    var _maxDate$valueOf;

    return (_maxDate$valueOf = maxDate == null ? void 0 : maxDate.valueOf()) != null ? _maxDate$valueOf : dt.addYears(new Date(), 100).valueOf();
  }, [maxDate]); // current month and year the user is viewing

  var _useState = useState(value),
      openedDate = _useState[0],
      setOpenedDate = _useState[1];

  var nextMonth = useCallback(function () {
    return setOpenedDate(function (d) {
      return dt.addMonths(d, 1);
    });
  }, [setOpenedDate]);
  var prevMonth = useCallback(function () {
    return setOpenedDate(function (d) {
      return dt.addMonths(d, -1);
    });
  }, [setOpenedDate]);
  var onMonthChange = useCallback(function (month) {
    setOpenedDate(function (d) {
      return new Date(d.getFullYear(), getMonthNumberFromName(month), d.getDate());
    });
  }, [setOpenedDate]);
  var onYearChange = useCallback(function (year) {
    setOpenedDate(function (d) {
      return new Date(year, d.getMonth(), d.getDate());
    });
  }, [setOpenedDate]);
  var handleClick = useCallback(function (d) {
    return onChange(d);
  }, [onChange]);
  var daysOfWeekElements = useMemo(function () {
    return getDaysOfWeek(weekStartsFrom).map(function (v) {
      return React.createElement("p", {
        key: v,
        className: "sdp--text " + (disabled ? 'sdp--text__inactive' : '')
      }, v);
    });
  }, [weekStartsFrom, disabled]);
  var daysOfMonthList = useMemo(function () {
    return getDatesOfMonth(openedDate, minDateValue, maxDateValue, weekStartsFrom);
  }, [openedDate, minDateValue, maxDateValue, weekStartsFrom]);
  return React.createElement("div", Object.assign({
    className: "sdp " + (className != null ? className : '') + " " + (disabled ? 'sdp--disabled' : ''),
    "aria-label": "Date Picker",
    tabIndex: disabled ? -1 : 0,
    ref: ref
  }, props), React.createElement(Header, {
    month: openedDate.getMonth(),
    year: openedDate.getFullYear(),
    minDateValue: minDateValue,
    maxDateValue: maxDateValue,
    nextMonth: nextMonth,
    prevMonth: prevMonth,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    disabled: disabled
  }), React.createElement("div", {
    className: "sdp--grid"
  }, daysOfWeekElements), React.createElement("div", {
    className: "sdp--grid"
  }, daysOfMonthList.map(function (_ref2) {
    var date = _ref2.date,
        active = _ref2.active,
        ms = _ref2.ms;
    return React.createElement(DateButton$1, {
      key: ms,
      date: date,
      active: active && !disabled,
      selected: dt.isSameDay(value, date),
      onClick: handleClick
    });
  })));
});
DatePicker.displayName = 'DatePicker';

var getCurrentTime = function getCurrentTime() {
  return convertDateToTime(new Date());
};
var convertDateToTime = function convertDateToTime(d) {
  return {
    hours: d.getHours(),
    minutes: d.getMinutes()
  };
};
var convertTimeToDate = function convertTimeToDate(t, d) {
  var newDate = d ? new Date(d.valueOf()) : new Date();
  newDate.setHours(t.hours);
  newDate.setMinutes(t.minutes);
  return newDate;
};

var Meridiem;

(function (Meridiem) {
  Meridiem["AM"] = "AM";
  Meridiem["PM"] = "PM";
})(Meridiem || (Meridiem = {}));

var option = function option(n) {
  return {
    value: n,
    label: n.toString().padStart(2, '0'),
    disabled: false
  };
};
/**
 * Creates a time value aligned with the minutes interval from am raw time input
 *
 * @param {Time} time The time value
 * @param {number} interval The interval between each minute select option
 * @returns {Time} Time value rounded to the nearest interval
 */


var alignTime = function alignTime(_ref, interval, lower) {
  var hours = _ref.hours,
      minutes = _ref.minutes;

  if (lower === void 0) {
    lower = true;
  }

  var rem = minutes % interval; // round minutes to nearest interval

  if (rem !== 0) {
    minutes = lower ? minutes - rem : minutes + interval - rem;
  }

  return {
    hours: hours,
    minutes: minutes
  };
};
var generateHourOptions = function generateHourOptions(timeFormat) {
  if (timeFormat === '12hr') {
    var _listOfOptions = new Array(12);

    _listOfOptions[0] = option(12);

    for (var i = 1; i <= 11; i += 1) {
      _listOfOptions[i] = option(i);
    }

    return _listOfOptions;
  }

  var listOfOptions = new Array(24);

  for (var _i = 0; _i <= 23; _i += 1) {
    listOfOptions[_i] = option(_i);
  }

  return listOfOptions;
};
var generateMinuteOptions = function generateMinuteOptions(minutesInterval) {
  var options = [];

  for (var i = 0; i < 60; i += minutesInterval) {
    options.push(option(i));
  }

  return options;
};
/**
 * Convert a value from 12 hour time format to 24 hour format
 *
 * @param hour hour to convert
 * @param meridiem am or pm
 */

var convertHourFrom12HrTo24Hr = function convertHourFrom12HrTo24Hr(hour, meridiem) {
  if (hour === 12) {
    return meridiem === Meridiem.AM ? 0 : 12;
  } else if (meridiem === Meridiem.PM) {
    return hour + 12;
  } else {
    return hour;
  }
};

var TwoDots = function TwoDots(_ref) {
  var _ref$height = _ref.height,
      height = _ref$height === void 0 ? '16' : _ref$height,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '16' : _ref$width,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'currentColor' : _ref$color;
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: width,
    height: height,
    fill: color,
    viewBox: "0 0 256 256"
  }, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React.createElement("circle", {
    cx: "128",
    cy: "80",
    r: "20"
  }), React.createElement("circle", {
    cx: "128",
    cy: "176",
    r: "20"
  }));
};

var _excluded$2 = ["onChange", "value", "className", "disabled", "displayFormat", "minutesInterval"];
var meridiemOptions = [{
  value: Meridiem.AM,
  label: Meridiem.AM,
  disabled: false
}, {
  value: Meridiem.PM,
  label: Meridiem.PM,
  disabled: false
}];

var formatNumber = function formatNumber(v) {
  return v.toString().padStart(2, '0');
};
/**
 * TimePicker React Component
 */


var TimePicker = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var onChange = _ref.onChange,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      _ref$displayFormat = _ref.displayFormat,
      displayFormat = _ref$displayFormat === void 0 ? '12hr' : _ref$displayFormat,
      _ref$minutesInterval = _ref.minutesInterval,
      minutesInterval = _ref$minutesInterval === void 0 ? 5 : _ref$minutesInterval,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$2);

  if (typeof minutesInterval !== 'number' && minutesInterval < 1 && Number.isInteger(minutesInterval)) {
    throw new Error('minutesInterval must be an integer greater than 0');
  }

  var _useState = useState(function () {
    if (value !== undefined) return alignTime(value, minutesInterval);
    var d = new Date();
    return alignTime({
      minutes: d.getMinutes(),
      hours: d.getHours()
    }, minutesInterval);
  }),
      selectedTime = _useState[0],
      setSelectedTime = _useState[1];

  var _useState2 = useState(function () {
    return selectedTime.hours <= 11 ? Meridiem.AM : Meridiem.PM;
  }),
      currentMeridiem = _useState2[0],
      setCurrentMeridiem = _useState2[1];

  var handleMinutesChange = useCallback(function (v) {
    setSelectedTime(function (t) {
      return alignTime(_extends({}, t, {
        minutes: v
      }), minutesInterval);
    });
  }, [minutesInterval]);
  var handleHoursChange = useCallback(function (v) {
    setSelectedTime(function (t) {
      var hours = v;

      if (displayFormat === '12hr') {
        hours = convertHourFrom12HrTo24Hr(hours, currentMeridiem);
      }

      return alignTime(_extends({}, t, {
        hours: hours
      }), minutesInterval);
    });
  }, [minutesInterval, currentMeridiem, displayFormat]);
  var handleMeridiemChange = useCallback(function (v) {
    setCurrentMeridiem(v);
    setSelectedTime(function (t) {
      if (v === Meridiem.AM) {
        return {
          minutes: t.minutes,
          hours: t.hours - 12
        };
      }

      return {
        minutes: t.minutes,
        hours: t.hours + 12
      };
    });
  }, []); // the array of options of minutes to select from

  var minuteOptions = useMemo(function () {
    return generateMinuteOptions(minutesInterval);
  }, [minutesInterval]); // the array of options of hours to select from

  var hourOptions = useMemo(function () {
    return generateHourOptions(displayFormat);
  }, [displayFormat]); //

  var currentHourDisplayValue = useMemo(function () {
    if (displayFormat === '24hr') return selectedTime.hours;
    var h = currentMeridiem === Meridiem.AM ? selectedTime.hours : selectedTime.hours - 12;
    if (h === 0) return 12;
    return h;
  }, [selectedTime.hours, displayFormat, currentMeridiem]);
  useEffect(function () {
    onChange(selectedTime);
  }, [selectedTime, onChange]);
  useEffect(function () {
    setSelectedTime(alignTime(selectedTime, minutesInterval));
  }, [minutesInterval]);
  return React.createElement("div", Object.assign({
    className: "stp " + (className != null ? className : '') + " " + (disabled ? 'stp--disabled' : '')
  }, props, {
    ref: ref
  }), React.createElement(CustomSelect, {
    disabled: disabled,
    value: currentHourDisplayValue,
    onChange: handleHoursChange,
    options: hourOptions,
    formatValue: formatNumber
  }), React.createElement("span", {
    className: "stp--divider " + (disabled ? 'stp--divider__disabled' : '')
  }, React.createElement(TwoDots, null)), React.createElement(CustomSelect, {
    disabled: disabled,
    value: selectedTime.minutes,
    onChange: handleMinutesChange,
    options: minuteOptions,
    formatValue: formatNumber
  }), displayFormat === '12hr' && React.createElement(CustomSelect, {
    disabled: disabled,
    value: currentMeridiem,
    onChange: handleMeridiemChange,
    options: meridiemOptions
  }));
});
TimePicker.displayName = 'TimePicker';

export default DatePicker;
export { TimePicker, convertDateToTime, convertTimeToDate, getCurrentTime };
//# sourceMappingURL=sassy-datepicker.esm.js.map
